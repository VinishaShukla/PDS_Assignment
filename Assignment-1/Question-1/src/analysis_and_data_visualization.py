# -*- coding: utf-8 -*-
"""Analysis and Data Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tcfLtXPBYGOSwPjViO0umR7Fwl5wEKNC
"""

import pandas as pd
from scipy import stats

# Reading the CSV file
frailty_data = pd.read_csv("clean_frailty_data.csv")

n1 = len(frailty_data[frailty_data['Frailty'] == 'N']['Weight'])
n2 = len(frailty_data[frailty_data['Frailty'] == 'Y']['Weight'])
# Performing the t-test
t_test_result = stats.ttest_ind(frailty_data[frailty_data['Frailty'] == 'Y']['Weight'],
                                frailty_data[frailty_data['Frailty'] == 'N']['Weight'], equal_var=False)

# Writing the t-test results to a text file
n1 = len(frailty_data[frailty_data['Frailty'] == 'N']['Weight'])
n2 = len(frailty_data[frailty_data['Frailty'] == 'Y']['Weight'])
# Calculating mean values for each group
mean_group_N = weights_N.mean()
mean_group_Y = weights_Y.mean()

degreeOfFreedom = (n1 + n2 - 2)  # degrees of freedom for Welch's t-test
with open("results.txt", "w") as file:
    file.write("T-test Result: {t_test_result}\n")
    file.write(f"T-statistic: {t_test_result.statistic}\n")
    file.write(f"P-value: {t_test_result.pvalue}\n")
    file.write(f"degree of freedom: {degreeOfFreedom}\n")
    file.write("mean in group N " + str(mean_group_N) + "\n")
    file.write("mean in group Y " + str(mean_group_Y) + "\n")

import matplotlib.pyplot as plt
import seaborn as sns

# Sample data
weights_group_N = [100, 110, 115, 120, 125, 130, 135, 140]
weights_group_Y = [115, 120, 125, 130, 135, 140, 145, 150]

# Create a box plot
plt.figure(figsize=(8, 6))
sns.boxplot(x=['N'] * len(weights_group_N) + ['Y'] * len(weights_group_Y),
            y=weights_group_N + weights_group_Y,
            palette='Set2')
plt.xlabel('Frailty Group')
plt.ylabel('Weight')
plt.title('Comparison of Weight Distribution between Frailty Groups')
plt.show()



import pandas as pd
import matplotlib.pyplot as plt

# Sample data
data = {'Weight': [112, 136, 153, 142, 144, 123, 141, 136, 112, 120]}

# Create DataFrame
df = pd.DataFrame(data)

# Histogram
plt.figure(figsize=(8, 6))
plt.hist(df['Weight'], bins=5, color='purple', edgecolor='black')
plt.title('Distribution of Weight')
plt.xlabel('Weight (lbs)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()